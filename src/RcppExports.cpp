// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// un
Eigen::VectorXd un(Eigen::MatrixXd x, Eigen::VectorXd y);
RcppExport SEXP _SA24204174_un(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(un(x, y));
    return rcpp_result_gen;
END_RCPP
}
// relu
Eigen::VectorXd relu(Eigen::VectorXd vec);
RcppExport SEXP _SA24204174_relu(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(relu(vec));
    return rcpp_result_gen;
END_RCPP
}
// betahat
Eigen::VectorXd betahat(Eigen::MatrixXd sigma, Eigen::VectorXd u);
RcppExport SEXP _SA24204174_betahat(SEXP sigmaSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(betahat(sigma, u));
    return rcpp_result_gen;
END_RCPP
}
// lmrc_lasso
Eigen::VectorXd lmrc_lasso(int n, int p, Eigen::MatrixXd sigma, double L, double s, Eigen::VectorXd u, Eigen::VectorXd beta_ini, Eigen::VectorXd beta_ori, Eigen::VectorXd w, double lambda, double alpha, int max_iter, double tol);
RcppExport SEXP _SA24204174_lmrc_lasso(SEXP nSEXP, SEXP pSEXP, SEXP sigmaSEXP, SEXP LSEXP, SEXP sSEXP, SEXP uSEXP, SEXP beta_iniSEXP, SEXP beta_oriSEXP, SEXP wSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type u(uSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_ini(beta_iniSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_ori(beta_oriSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(lmrc_lasso(n, p, sigma, L, s, u, beta_ini, beta_ori, w, lambda, alpha, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// lmrc_lasso_debias
Eigen::VectorXd lmrc_lasso_debias(int n, int p, Eigen::MatrixXd sigma, double L, double s, Eigen::VectorXd u, Eigen::VectorXd beta_ini, Eigen::VectorXd beta_ori, Eigen::VectorXd w, Eigen::VectorXd denominator, double lambda, double alpha, int max_iter, double tol, double l1_lambda);
RcppExport SEXP _SA24204174_lmrc_lasso_debias(SEXP nSEXP, SEXP pSEXP, SEXP sigmaSEXP, SEXP LSEXP, SEXP sSEXP, SEXP uSEXP, SEXP beta_iniSEXP, SEXP beta_oriSEXP, SEXP wSEXP, SEXP denominatorSEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP l1_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type u(uSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_ini(beta_iniSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta_ori(beta_oriSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type w(wSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type denominator(denominatorSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type l1_lambda(l1_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(lmrc_lasso_debias(n, p, sigma, L, s, u, beta_ini, beta_ori, w, denominator, lambda, alpha, max_iter, tol, l1_lambda));
    return rcpp_result_gen;
END_RCPP
}
// kl
double kl(Eigen::VectorXd weight, Eigen::VectorXd prior);
RcppExport SEXP _SA24204174_kl(SEXP weightSEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(kl(weight, prior));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SA24204174_un", (DL_FUNC) &_SA24204174_un, 2},
    {"_SA24204174_relu", (DL_FUNC) &_SA24204174_relu, 1},
    {"_SA24204174_betahat", (DL_FUNC) &_SA24204174_betahat, 2},
    {"_SA24204174_lmrc_lasso", (DL_FUNC) &_SA24204174_lmrc_lasso, 13},
    {"_SA24204174_lmrc_lasso_debias", (DL_FUNC) &_SA24204174_lmrc_lasso_debias, 15},
    {"_SA24204174_kl", (DL_FUNC) &_SA24204174_kl, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SA24204174(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
