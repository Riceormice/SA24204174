devtools::document()
rep.col
TransSIM::rep.col(1,1)
TransSIM::un(1,1)
TransSIM::un(c(1,1),1)
TransSIM::un(c(1,1),c(1,1))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build(vignettes=FALSE)
#ThiswillbuildanRpackage
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(lassoshooting)
lassoshooting
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
usethis::use_vignette("my-vignette")
TransSIM
TransSIM::un()
TransSIM::un(1,1)
devtools::document()
getwd()
devtools::document()
devtools::document()
devtools::document()
getwd()
setwd("D:/mypackage/")
devtools::document()
setwd("D:/mypackage/TransSIM")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
TransSIM::lmrc_lasso()
TransSIM::lmrc_lasso()
devtools::document()
library(TransSIM)
devtools::document()
for(i in 1){
cat(1)
}
is.singular.matrix
library(matrixcalc)
devtools::document()
Sig.X
diag(rep(1,5))
library(TransSIM)
//' n <- 100
n <- 100
p <- 50
beta_eg <- c(rep(0.5,p-1),0)
Sig.X <- diag(rep(1,p))
X <- rmvnorm(n.vec[k], rep(0, p), Sig.X)
library(dae)
n <- 100
p <- 50
beta_eg <- c(rep(0.5,p-1),0)
Sig.X <- diag(rep(1,p))
X <- rmvnorm(n.vec[k], rep(0, p), Sig.X)
n <- 100
p <- 50
beta_eg <- c(rep(0.5,p-1),0)
Sig.X <- diag(rep(1,p))
X <- rmvnorm(n.vec[k], rep(0, p), Sig.X)
library(glmnet)
n <- 100
p <- 50
beta_eg <- c(rep(0.5,p-1),0)
Sig.X <- diag(rep(1,p))
X <- rmvnorm(n.vec[k], rep(0, p), Sig.X)
library(glmnet)
n <- 100
p <- 50
beta_eg <- c(rep(0.5,p-1),0)
Sig.X <- diag(rep(1,p))
X <- rmvnorm(n, rep(0, p), Sig.X)
n <- 100
p <- 50
beta_eg <- c(rep(0.5,p-1),0)
Sig.X <- diag(rep(1,p))
X <- rmvnorm(n, rep(0, p), Sig.X)
n
Sig.X
library(mvtnorm)
n <- 100
p <- 50
beta_eg <- c(rep(0.5,p-1),0)
Sig.X <- diag(rep(1,p))
X <- rmvnorm(n, rep(0, p), Sig.X)
y <- X%*%beta_eg + rnorm (n, 0, 1))
n <- 100
p <- 50
beta_eg <- c(rep(0.5,p-1),0)
Sig.X <- diag(rep(1,p))
X <- rmvnorm(n, rep(0, p), Sig.X)
y <- X%*%beta_eg + rnorm (n, 0, 1)
L <- 1.0
s <- 0
u <- rnorm(p)
beta_ini <- rep(1, p)
beta_ori <- rep(0, p)
w <- rep(1, p)
denominator <- rep(1, p)
lambda <- 0.1
alpha <- 0.15
max_iter <- 100
tol <- 5e-6
l1_lambda <- 0.01
beta_debias <- lmrc_lasso_debias(n, p, sigma, L, s, u, beta_ini, beta_ori, w, denominator, lambda, alpha, max_iter, tol, l1_lambda)
sigma
n <- 100
p <- 50
beta_eg <- c(rep(0.5,p-1),0)
Sig.X <- diag(rep(1,p))
X <- rmvnorm(n, rep(0, p), Sig.X)
y <- X%*%beta_eg + rnorm (n, 0, 1)
L <- 1.0
s <- 0
u <- rnorm(p)
beta_ini <- rep(1, p)
beta_ori <- rep(0, p)
w <- rep(1, p)
denominator <- rep(1, p)
lambda <- 0.1
alpha <- 0.15
max_iter <- 100
tol <- 5e-6
l1_lambda <- 0.01
beta_debias <- lmrc_lasso_debias(n, p, Sig.X, L, s, u, beta_ini, beta_ori, w, denominator, lambda, alpha, max_iter, tol, l1_lambda)
print(beta_debias)
s
n <- 100
p <- 50
beta_eg <- c(rep(0.5,p-1),0)
Sig.X <- diag(rep(1,p))
X <- rmvnorm(n, rep(0, p), Sig.X)
y <- X%*%beta_eg + rnorm (n, 0, 1)
L <- 1.0
s <- 0
u <- rnorm(p)
beta_ini <- rep(1, p)
beta_ori <- rep(0, p)
w <- rep(1, p)
denominator <- rep(1, p)
lambda <- 0.1
alpha <- 0.15
max_iter <- 100
tol <- 5e-6
l1_lambda <- 0.01
beta_debias <- lmrc_lasso_debias(n, p, Sig.X, L, 1, u, beta_ini, beta_ori, w, denominator, lambda, alpha, max_iter, tol, l1_lambda)
print(beta_debias)
u
devtools::document()
devtools::document()
library(TransSIM)
library(MASS)
library(Rcpp)
library(glmnet)
library(caret)#做交叉验证用
library(mvtnorm)
library(parallel)
library("foreach")
library("doParallel")
library(matrixcalc)
nums <- 0
sims <- 0
set.seed(20231027+sims)
priors <- numeric(72)
for(i in 1:36){
priors[(2*i-1):(2*i)] <- sort(runif(2,1,2))
}
# 0.5 去掉两个，偏大了！！！！！
sse_fit <- NULL
sse_target_only <- NULL
fp_lasso <- NULL
fn_lasso <- NULL
mse1 <- NULL
fp_oracle <- NULL
fn_oracle <- NULL
mse2 <- NULL
fp_trans <- NULL
fn_trans <- NULL
mse3 <- NULL
mse4 <- NULL
mse5 <- NULL
mse6 <- NULL
#mse7 <- NULL
#mse8 <- NULL
mse_single_trans1 <- NULL
mse_single_trans2 <- NULL
fp_target <- NULL
fn_target <- NULL
fp_trans1 <- NULL
fn_trans1 <- NULL
fp_trans2 <- NULL
fn_trans2 <- NULL
p_ini <- NULL
p_1 <- NULL
p_2 <- NULL
p_3 <- NULL
p_4 <- NULL
p_5 <- NULL
p_6 <- NULL
p_last <- NULL
fp_ini <- NULL
fp_1 <- NULL
fp_2 <- NULL
fp_3 <- NULL
fp_4 <- NULL
fp_5 <- NULL
fp_6 <- NULL
fp_last <- NULL
fn_ini <- NULL
fn_1 <- NULL
fn_2 <- NULL
fn_3 <- NULL
fn_4 <- NULL
fn_5 <- NULL
fn_6 <- NULL
fn_last <- NULL
iter_times <- NULL
mymse_l2_ini <- NULL
mymse_l2_1 <- NULL
mymse_l2_2 <- NULL
mymse_l2_3 <- NULL
mymse_l2_4 <- NULL
mymse_l2_5 <- NULL
mymse_l2_6 <- NULL
mymse_l2_last <- NULL
trans_sse <- NULL
ps <- NULL
n0s <- NULL
sizea0s <- NULL
sigbetas <- NULL
Ms <- NULL
hs <- NULL
exacts <- NULL
ss <- NULL
cm_oracle <- NULL
cm_lasso <- NULL
cm_trans <- NULL
cm_my <- NULL
# source data size
size.A0 = 4
sig.beta = 0.3
p = 500
M = 20
n0 = 150
sig.z <- 1
n_s <- 100
n.vec <- c(n0, rep(n_s, M))
Sig.X <- diag(1, p)
Niter = 200
l1=T
A0 = 1:size.A0
ind.1 <- 1:n0
#这里h变为12了，6.6
h=6
exact = TRUE
s=16
set.seed(20231027+ sims + nums)
#source("TransLasso-functions.R")
start <- (proc.time())[3][[1]]
#if(size.A0<1){next}
nums<-nums+1
#if(nums !=11) next
print(nums)
beta0<-
coef.all <-Coef.gen( s, h = h, q = 2*s, size.A0 = size.A0,  M = M,   sig.beta = sig.beta,
sig.delta1 = sig.beta, sig.delta2 = sig.beta+0.2, p = p, exact)
B <- cbind(coef.all$beta0, coef.all$W)
beta0 <- coef.all$beta0
###generate the data
X <- NULL
y <- NULL
for (k in 1:(M + 1)) {
X <- rbind(X, rmvnorm(n.vec[k], rep(0, p), Sig.X))
ind.k <- ind.set(n.vec, k)
y <- c(y, X[ind.k, ] %*% B[, k] + rnorm (n.vec[k], 0, 1))
}
nums <- 0
sims <- 0
set.seed(20231027+sims)
priors <- numeric(72)
for(i in 1:36){
priors[(2*i-1):(2*i)] <- sort(runif(2,1,2))
}
# 0.5 去掉两个，偏大了！！！！！
sse_fit <- NULL
sse_target_only <- NULL
fp_lasso <- NULL
fn_lasso <- NULL
mse1 <- NULL
fp_oracle <- NULL
fn_oracle <- NULL
mse2 <- NULL
fp_trans <- NULL
fn_trans <- NULL
mse3 <- NULL
mse4 <- NULL
mse5 <- NULL
mse6 <- NULL
#mse7 <- NULL
#mse8 <- NULL
mse_single_trans1 <- NULL
mse_single_trans2 <- NULL
fp_target <- NULL
fn_target <- NULL
fp_trans1 <- NULL
fn_trans1 <- NULL
fp_trans2 <- NULL
fn_trans2 <- NULL
p_ini <- NULL
p_1 <- NULL
p_2 <- NULL
p_3 <- NULL
p_4 <- NULL
p_5 <- NULL
p_6 <- NULL
p_last <- NULL
fp_ini <- NULL
fp_1 <- NULL
fp_2 <- NULL
fp_3 <- NULL
fp_4 <- NULL
fp_5 <- NULL
fp_6 <- NULL
fp_last <- NULL
fn_ini <- NULL
fn_1 <- NULL
fn_2 <- NULL
fn_3 <- NULL
fn_4 <- NULL
fn_5 <- NULL
fn_6 <- NULL
fn_last <- NULL
iter_times <- NULL
mymse_l2_ini <- NULL
mymse_l2_1 <- NULL
mymse_l2_2 <- NULL
mymse_l2_3 <- NULL
mymse_l2_4 <- NULL
mymse_l2_5 <- NULL
mymse_l2_6 <- NULL
mymse_l2_last <- NULL
trans_sse <- NULL
ps <- NULL
n0s <- NULL
sizea0s <- NULL
sigbetas <- NULL
Ms <- NULL
hs <- NULL
exacts <- NULL
ss <- NULL
cm_oracle <- NULL
cm_lasso <- NULL
cm_trans <- NULL
cm_my <- NULL
# source data size
size.A0 = 4
sig.beta = 0.3
p = 500
M = 20
n0 = 150
sig.z <- 1
n_s <- 100
n.vec <- c(n0, rep(n_s, M))
Sig.X <- diag(1, p)
Niter = 200
l1=T
A0 = 1:size.A0
ind.1 <- 1:n0
#这里h变为12了，6.6
h=6
exact = TRUE
s=16
set.seed(20231027+ sims + nums)
#source("TransLasso-functions.R")
start <- (proc.time())[3][[1]]
#if(size.A0<1){next}
nums<-nums+1
#if(nums !=11) next
print(nums)
beta0<-
coef.all <-Coef.gen( s, h = h, q = 2*s, size.A0 = size.A0,  M = M,   sig.beta = sig.beta,
sig.delta1 = sig.beta, sig.delta2 = sig.beta+0.2, p = p, exact)
B <- cbind(coef.all$beta0, coef.all$W)
beta0 <- coef.all$beta0
###generate the data
X <- NULL
y <- NULL
for (k in 1:(M + 1)) {
X <- rbind(X, rmvnorm(n.vec[k], rep(0, p), Sig.X))
ind.k <- ind.set(n.vec, k)
y <- c(y, X[ind.k, ] %*% B[, k] + rnorm (n.vec[k], 0, 1))
}
mse.vec<-rep(NA,8)
beta.init <-
as.numeric(glmnet(X[1:n.vec[1], ], y[1:n.vec[1]], lambda = 0.52*sqrt(2 * log(p) / n.vec[1]))$beta)
beta.init <- betascale(beta.init,Sig.X)*1.2
mse.vec[1] = mse.fun(as.numeric(beta.init),y[1:n0], beta0)$est.err
fp_lasso <- c(fp_lasso,fp(beta.init,beta0))
fn_lasso <- c(fn_lasso,fn(beta.init,beta0))
#return(list(X=X,y=y))
######Oracle Trans-Lasso#######
beta.init
beta0
mse.vec[1] = mse.fun(as.numeric(beta.init),y[1:n0], beta0)$est.err
fp_lasso <- c(fp_lasso,fp(beta.init,beta0))
fn_lasso <- c(fn_lasso,fn(beta.init,beta0))
#return(list(X=X,y=y))
######Oracle Trans-Lasso#######
mse.fun(as.numeric(beta.init),y[1:n0], beta0)$est.err
mse.fun
mse.fun(as.numeric(beta.init),X[1:n0,], beta0)$est.err
X.test %*% (beta.ini - beta0)
X[1:n0,] %*% (beta.ini - beta0)
X[1:n0,] %*% (beta0 - beta0)
mse.fun(as.numeric(beta.init),X[1:n0,], beta0)$est.err
mse.fun(as.numeric(beta.init),X[1:n0,], as.numeric(beta0))$est.err
dim(X)
mse.fun
mse.fun(as.numeric(beta.init), as.numeric(beta0),X[1:n0,])$est.err
mse.fun(as.numeric(beta.init), as.numeric(beta0),X[1:n0,])$pred.err
devtools::build_vignettes()
prior <- c(1, 0.5, 0.2)
X <- matrix(rnorm(300), nrow = 100, ncol = 3)
y <- rnorm(100)
betas <- matrix(rnorm(300), nrow = 3, ncol = 100)
lambda <- seq(0.01, 1, by = 0.1)
ntimes <- 5
k <- 5
best_lambda <- lambda_cross(prior, X, y, betas, lambda, ntimes, k)
lambda_cross
dim(betaas)
dim(betas)
devtools::document()
devtools::document()
devtools::document()
Run the function
best_lambda <- lambda_cross(prior, X, y, betas, lambda, ntimes, k)
prior <- c(1, 0.5, 0.2)
betas <- t(matrix(rnorm(300), nrow = 3, ncol = 100))
best_lambda <- lambda_cross(prior, X, y, betas, lambda, ntimes, k)
dim(t(betas)%*%cov(X))
dim(cov(X))
length(betas)
prior <- c(1, 0.5, 0.2)
betas <- t(matrix(rnorm(9), nrow = 3, ncol = 3))
best_lambda <- lambda_cross(prior, X, y, betas, lambda, ntimes, k)
betas[,1]
devtools::document()
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::document()
devtools::document()
library(SA24204174)
